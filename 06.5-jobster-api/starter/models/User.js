const mongoose = require(`mongoose`);
const bcrypt = require(`bcryptjs`);
const jwt = require(`jsonwebtoken`);

const UserSchema = new mongoose.Schema({
    name: {
        type: String,
        required: [true, `Please provide name`],
        minLength: 3,
        maxLength: 50,
    },
    email: {
        type: String, 
        required: [true, `Please provide email`],
        //  general expression for email validation, got from the docx
        match: [
            /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
            'Please provide a valid email',
        ],
        unique: true,   // this is not a validator, it creates a unique index
    },
    password: {
        type: String,
        required: [true, `Please provide password`],
        minLength: 6,
        // maxLength: 12,   //  the haspassword is to be stored not the actual password, and the hashpassword is way too long, thus you shouldnot set the maxlength
    },
});

//  this points to the documnet
UserSchema.pre(`save`, async function(next) {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
});

UserSchema.methods.getName = function () {
    return this.name;
}
UserSchema.methods.createJWT = function () {
    return jwt.sign({userId: this._id, name: this.name}, process.env.JWT_SECRET, {
        expiresIn: process.env.JWT_LIFETIME,
    });
}
//  we can also set the expires in in the .env file, this is what wee will do
//  if you make expiresIn a number then it will be in seconds, however if you make it a string, you need to make sure you give the proper time unit along with it

//  compare password hashs
//  creating haspassword is a one way task but we can compare the hashpasswords generated by using the compare method

UserSchema.methods.comparePassword = async function (candidatePassword) {
    const isMatch = await bcrypt.compare(candidatePassword, this.password);
    return isMatch;
}
module.exports = mongoose.model(`User`, UserSchema);